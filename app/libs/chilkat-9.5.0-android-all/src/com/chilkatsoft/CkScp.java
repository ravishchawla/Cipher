/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.5
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.chilkatsoft;

public class CkScp {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected CkScp(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(CkScp obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        chilkatJNI.delete_CkScp(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public CkScp() {
    this(chilkatJNI.new_CkScp(), true);
  }

  public void LastErrorXml(CkString str) {
    chilkatJNI.CkScp_LastErrorXml(swigCPtr, this, CkString.getCPtr(str), str);
  }

  public void LastErrorHtml(CkString str) {
    chilkatJNI.CkScp_LastErrorHtml(swigCPtr, this, CkString.getCPtr(str), str);
  }

  public void LastErrorText(CkString str) {
    chilkatJNI.CkScp_LastErrorText(swigCPtr, this, CkString.getCPtr(str), str);
  }

  public void put_EventCallbackObject(CkBaseProgress progress) {
    chilkatJNI.CkScp_put_EventCallbackObject(swigCPtr, this, CkBaseProgress.getCPtr(progress), progress);
  }

  public void get_LastErrorHtml(CkString str) {
    chilkatJNI.CkScp_get_LastErrorHtml(swigCPtr, this, CkString.getCPtr(str), str);
  }

  public String lastErrorHtml() {
    return chilkatJNI.CkScp_lastErrorHtml(swigCPtr, this);
  }

  public void get_LastErrorText(CkString str) {
    chilkatJNI.CkScp_get_LastErrorText(swigCPtr, this, CkString.getCPtr(str), str);
  }

  public String lastErrorText() {
    return chilkatJNI.CkScp_lastErrorText(swigCPtr, this);
  }

  public void get_LastErrorXml(CkString str) {
    chilkatJNI.CkScp_get_LastErrorXml(swigCPtr, this, CkString.getCPtr(str), str);
  }

  public String lastErrorXml() {
    return chilkatJNI.CkScp_lastErrorXml(swigCPtr, this);
  }

  public void get_Version(CkString str) {
    chilkatJNI.CkScp_get_Version(swigCPtr, this, CkString.getCPtr(str), str);
  }

  public String version() {
    return chilkatJNI.CkScp_version(swigCPtr, this);
  }

  public void get_DebugLogFilePath(CkString str) {
    chilkatJNI.CkScp_get_DebugLogFilePath(swigCPtr, this, CkString.getCPtr(str), str);
  }

  public String debugLogFilePath() {
    return chilkatJNI.CkScp_debugLogFilePath(swigCPtr, this);
  }

  public void put_DebugLogFilePath(String newVal) {
    chilkatJNI.CkScp_put_DebugLogFilePath(swigCPtr, this, newVal);
  }

  public boolean get_VerboseLogging() {
    return chilkatJNI.CkScp_get_VerboseLogging(swigCPtr, this);
  }

  public void put_VerboseLogging(boolean newVal) {
    chilkatJNI.CkScp_put_VerboseLogging(swigCPtr, this, newVal);
  }

  public boolean get_LastMethodSuccess() {
    return chilkatJNI.CkScp_get_LastMethodSuccess(swigCPtr, this);
  }

  public void put_LastMethodSuccess(boolean newVal) {
    chilkatJNI.CkScp_put_LastMethodSuccess(swigCPtr, this, newVal);
  }

  public boolean SaveLastError(String path) {
    return chilkatJNI.CkScp_SaveLastError(swigCPtr, this, path);
  }

  public int get_HeartbeatMs() {
    return chilkatJNI.CkScp_get_HeartbeatMs(swigCPtr, this);
  }

  public void put_HeartbeatMs(int newVal) {
    chilkatJNI.CkScp_put_HeartbeatMs(swigCPtr, this, newVal);
  }

  public int get_PercentDoneScale() {
    return chilkatJNI.CkScp_get_PercentDoneScale(swigCPtr, this);
  }

  public void put_PercentDoneScale(int newVal) {
    chilkatJNI.CkScp_put_PercentDoneScale(swigCPtr, this, newVal);
  }

  public void get_SyncMustMatch(CkString str) {
    chilkatJNI.CkScp_get_SyncMustMatch(swigCPtr, this, CkString.getCPtr(str), str);
  }

  public String syncMustMatch() {
    return chilkatJNI.CkScp_syncMustMatch(swigCPtr, this);
  }

  public void put_SyncMustMatch(String newVal) {
    chilkatJNI.CkScp_put_SyncMustMatch(swigCPtr, this, newVal);
  }

  public void get_SyncMustNotMatch(CkString str) {
    chilkatJNI.CkScp_get_SyncMustNotMatch(swigCPtr, this, CkString.getCPtr(str), str);
  }

  public String syncMustNotMatch() {
    return chilkatJNI.CkScp_syncMustNotMatch(swigCPtr, this);
  }

  public void put_SyncMustNotMatch(String newVal) {
    chilkatJNI.CkScp_put_SyncMustNotMatch(swigCPtr, this, newVal);
  }

  public void get_SyncedFiles(CkString str) {
    chilkatJNI.CkScp_get_SyncedFiles(swigCPtr, this, CkString.getCPtr(str), str);
  }

  public String syncedFiles() {
    return chilkatJNI.CkScp_syncedFiles(swigCPtr, this);
  }

  public void put_SyncedFiles(String newVal) {
    chilkatJNI.CkScp_put_SyncedFiles(swigCPtr, this, newVal);
  }

  public boolean DownloadBinary(String remotePath, CkByteData outBytes) {
    return chilkatJNI.CkScp_DownloadBinary(swigCPtr, this, remotePath, CkByteData.getCPtr(outBytes), outBytes);
  }

  public CkTask DownloadBinaryAsync(String remotePath) {
    long cPtr = chilkatJNI.CkScp_DownloadBinaryAsync(swigCPtr, this, remotePath);
    return (cPtr == 0) ? null : new CkTask(cPtr, true);
  }

  public boolean DownloadBinaryEncoded(String remotePath, String encoding, CkString outStr) {
    return chilkatJNI.CkScp_DownloadBinaryEncoded(swigCPtr, this, remotePath, encoding, CkString.getCPtr(outStr), outStr);
  }

  public String downloadBinaryEncoded(String remotePath, String encoding) {
    return chilkatJNI.CkScp_downloadBinaryEncoded(swigCPtr, this, remotePath, encoding);
  }

  public CkTask DownloadBinaryEncodedAsync(String remotePath, String encoding) {
    long cPtr = chilkatJNI.CkScp_DownloadBinaryEncodedAsync(swigCPtr, this, remotePath, encoding);
    return (cPtr == 0) ? null : new CkTask(cPtr, true);
  }

  public boolean DownloadFile(String remotePath, String localPath) {
    return chilkatJNI.CkScp_DownloadFile(swigCPtr, this, remotePath, localPath);
  }

  public CkTask DownloadFileAsync(String remotePath, String localPath) {
    long cPtr = chilkatJNI.CkScp_DownloadFileAsync(swigCPtr, this, remotePath, localPath);
    return (cPtr == 0) ? null : new CkTask(cPtr, true);
  }

  public boolean DownloadString(String remotePath, String charset, CkString outStr) {
    return chilkatJNI.CkScp_DownloadString(swigCPtr, this, remotePath, charset, CkString.getCPtr(outStr), outStr);
  }

  public String downloadString(String remotePath, String charset) {
    return chilkatJNI.CkScp_downloadString(swigCPtr, this, remotePath, charset);
  }

  public CkTask DownloadStringAsync(String remotePath, String charset) {
    long cPtr = chilkatJNI.CkScp_DownloadStringAsync(swigCPtr, this, remotePath, charset);
    return (cPtr == 0) ? null : new CkTask(cPtr, true);
  }

  public boolean SyncTreeDownload(String remoteRoot, String localRoot, int mode, boolean bRecurse) {
    return chilkatJNI.CkScp_SyncTreeDownload(swigCPtr, this, remoteRoot, localRoot, mode, bRecurse);
  }

  public CkTask SyncTreeDownloadAsync(String remoteRoot, String localRoot, int mode, boolean bRecurse) {
    long cPtr = chilkatJNI.CkScp_SyncTreeDownloadAsync(swigCPtr, this, remoteRoot, localRoot, mode, bRecurse);
    return (cPtr == 0) ? null : new CkTask(cPtr, true);
  }

  public boolean SyncTreeUpload(String localBaseDir, String remoteBaseDir, int mode, boolean bRecurse) {
    return chilkatJNI.CkScp_SyncTreeUpload(swigCPtr, this, localBaseDir, remoteBaseDir, mode, bRecurse);
  }

  public CkTask SyncTreeUploadAsync(String localBaseDir, String remoteBaseDir, int mode, boolean bRecurse) {
    long cPtr = chilkatJNI.CkScp_SyncTreeUploadAsync(swigCPtr, this, localBaseDir, remoteBaseDir, mode, bRecurse);
    return (cPtr == 0) ? null : new CkTask(cPtr, true);
  }

  public boolean UploadBinary(String remotePath, CkByteData binData) {
    return chilkatJNI.CkScp_UploadBinary(swigCPtr, this, remotePath, CkByteData.getCPtr(binData), binData);
  }

  public CkTask UploadBinaryAsync(String remotePath, CkByteData binData) {
    long cPtr = chilkatJNI.CkScp_UploadBinaryAsync(swigCPtr, this, remotePath, CkByteData.getCPtr(binData), binData);
    return (cPtr == 0) ? null : new CkTask(cPtr, true);
  }

  public boolean UploadBinaryEncoded(String remotePath, String encodedData, String encoding) {
    return chilkatJNI.CkScp_UploadBinaryEncoded(swigCPtr, this, remotePath, encodedData, encoding);
  }

  public CkTask UploadBinaryEncodedAsync(String remotePath, String encodedData, String encoding) {
    long cPtr = chilkatJNI.CkScp_UploadBinaryEncodedAsync(swigCPtr, this, remotePath, encodedData, encoding);
    return (cPtr == 0) ? null : new CkTask(cPtr, true);
  }

  public boolean UploadFile(String localPath, String remotePath) {
    return chilkatJNI.CkScp_UploadFile(swigCPtr, this, localPath, remotePath);
  }

  public CkTask UploadFileAsync(String localPath, String remotePath) {
    long cPtr = chilkatJNI.CkScp_UploadFileAsync(swigCPtr, this, localPath, remotePath);
    return (cPtr == 0) ? null : new CkTask(cPtr, true);
  }

  public boolean UploadString(String remotePath, String textData, String charset) {
    return chilkatJNI.CkScp_UploadString(swigCPtr, this, remotePath, textData, charset);
  }

  public CkTask UploadStringAsync(String remotePath, String textData, String charset) {
    long cPtr = chilkatJNI.CkScp_UploadStringAsync(swigCPtr, this, remotePath, textData, charset);
    return (cPtr == 0) ? null : new CkTask(cPtr, true);
  }

  public boolean UseSsh(CkSsh sshConnection) {
    return chilkatJNI.CkScp_UseSsh(swigCPtr, this, CkSsh.getCPtr(sshConnection), sshConnection);
  }

}
